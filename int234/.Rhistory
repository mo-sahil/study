b <- 6
c <- 1
d <- b^2 - 4.0*a*C
d <- b^2 - 4*a*C
d <- b^2 - a*C
d <- b^2 - 4*a
d <- b^2 - 4*a*c
if(d>0) {
root1 <- (-b + sqrt(d))/(2*a)
root2 <- (-b - sqrt(d))/(2*a)
print(paste('Roots are:', root1, 'and', root2))
} else if(d==0) {
root1 <- -b/(2*a)
print(paste('Roots are:', root1))
} else {
realPart <- -b/(2*a)
imaginaryPart <- sqrt(-d)/(2*a)
print(paste('Roots are:', realPart, '+', imaginaryPart, 'i and', realPart, '-', imaginaryPart, 'i'))
}
b <- 4
d <- b^2 - 4*a*c
if(d>0) {
root1 <- (-b + sqrt(d))/(2*a)
root2 <- (-b - sqrt(d))/(2*a)
print(paste('Roots are:', root1, 'and', root2))
} else if(d==0) {
root1 <- -b/(2*a)
print(paste('Roots are:', root1))
} else {
realPart <- -b/(2*a)
imaginaryPart <- sqrt(-d)/(2*a)
print(paste('Roots are:', realPart, '+', imaginaryPart, 'i and', realPart, '-', imaginaryPart, 'i'))
}
a <- 1
b <- 4
c <- 1
d <- b^2 - 4*a*c
if(d>0) {
root1 <- (-b + sqrt(d))/(2*a)
root2 <- (-b - sqrt(d))/(2*a)
print(paste('Roots are:', root1, 'and', root2))
} else if(d==0) {
root1 <- -b/(2*a)
print(paste('Roots are:', root1))
} else {
realPart <- -b/(2*a)
imaginaryPart <- sqrt(-d)/(2*a)
print(paste('Roots are:', realPart, '+', imaginaryPart, 'i and', realPart, '-', imaginaryPart, 'i'))
}
a <- 1
b <- 2
c <- 1
d <- b^2 - 4*a*c
if(d>0) {
root1 <- (-b + sqrt(d))/(2*a)
root2 <- (-b - sqrt(d))/(2*a)
print(paste('Roots are:', root1, 'and', root2))
} else if(d==0) {
root1 <- -b/(2*a)
print(paste('Roots are:', root1))
} else {
realPart <- -b/(2*a)
imaginaryPart <- sqrt(-d)/(2*a)
print(paste('Roots are:', realPart, '+', imaginaryPart, 'i and', realPart, '-', imaginaryPart, 'i'))
}
a <- 1
b <- 1
c <- 1
d <- b^2 - 4*a*c
if(d>0) {
root1 <- (-b + sqrt(d))/(2*a)
root2 <- (-b - sqrt(d))/(2*a)
print(paste('Roots are:', root1, 'and', root2))
} else if(d==0) {
root1 <- -b/(2*a)
print(paste('Roots are:', root1))
} else {
realPart <- -b/(2*a)
imaginaryPart <- sqrt(-d)/(2*a)
print(paste('Roots are:', realPart, '+', imaginaryPart, 'i and', realPart, '-', imaginaryPart, 'i'))
}
a <- 1
b <- -2
c <- 3
d <- b^2 - 4*a*c
if(d>0) {
root1 <- (-b + sqrt(d))/(2*a)
root2 <- (-b - sqrt(d))/(2*a)
print(paste('Roots are:', root1, 'and', root2))
} else if(d==0) {
root1 <- -b/(2*a)
print(paste('Roots are:', root1))
} else {
realPart <- -b/(2*a)
imaginaryPart <- sqrt(-d)/(2*a)
print(paste('Roots are:', realPart, '+', imaginaryPart, 'i and', realPart, '-', imaginaryPart, 'i'))
}
a <- 1
b <- 2
c <- 3
d <- b^2 - 4*a*c
if(d>0) {
root1 <- (-b + sqrt(d))/(2*a)
root2 <- (-b - sqrt(d))/(2*a)
print(paste('Roots are:', root1, 'and', root2))
} else if(d==0) {
root1 <- -b/(2*a)
print(paste('Roots are:', root1))
} else {
realPart <- -b/(2*a)
imaginaryPart <- sqrt(-d)/(2*a)
print(paste('Roots are:', realPart, '+', imaginaryPart, 'i and', realPart, '-', imaginaryPart, 'i'))
}
n = as.numeric(getline("Enter a number : "))
n = as.numeric(readline("Enter a number : "))
result = 1
for(i in 2:n) {
result = result * i
}
print(result)
n = as.numeric(readline("Enter a number : "))
for(i in 2:n) {
fact = fact * i
}
fact = 1
for(i in 2:n) {
fact = fact * i
}
print(fact)
n = as.numeric(readline("Enter a number : "))
factorial <- function(n) {
if( n == 1) {
return(1);
}
return(factorial(n-1))
}
print(factorial(n))
factorial <- function(n) {
if( n == 1) {
return(1);
}
return(n*factorial(n-1))
}
print(factorial(n))
n = as.numeric(readline("Enter a number : "))
#method 1
fact = 1
for(i in 2:n) {
fact = fact * i
}
print(fact)
#method 2
factorial <- function(n) {
if( n == 1) {
return(1);
}
return(n*factorial(n-1))
}
print(factorial(n))
mat <- matri(1:6, 2, 3, TRUE)
mat <- matrix(1:6, 2, 3, TRUE)
mat
mat <- matrix(1:6, 2, 3, TRUE, c("A","B"))
mat <- matrix(1:6, 2, 3, TRUE, list(C("A","B"), c("X", "Y", "Z"))
mat <- matrix(1:6, 2, 3, TRUE, list(C("A","B"), c("X", "Y", "Z")))
mat <- matrix(1:6, 2, 3, TRUE, list(C("A","B"), c("X", "Y", "Z")))
mat
mat <- matrix(1:6, 2, 3, list(C("A","B"), c("X", "Y", "Z")))
mat <- matrix(1:6, 2, 3)
mat
matrix(1:4, nrow = 2)
mat <- matrix(1:6, 2, 3, TRUE, list("A","B"))
mat <- matrix(1:6, 2, 3, TRUE, c("A","B"))
mat <- matrix(1:6, 2, 3, TRUE, dimnames = c("A","B"))
mat <- matrix(1:6, 2, 3, TRUE, dimnames = list("A","B"))
mat2 <- matrix(4:9, 2, 3)
mat2
mat3 <- mat1 + mat2
mat1 <- matrix(1:6, 2, 3, TRUE)
mat1
mat2 <- matrix(4:9, 2, 3)
mat2
mat3 <- mat1 + mat2
mat3
mat4 <- matrix(1:10, 2, 5)
mat3 + mat4
mat4[2,4]
mat4
mat[2,]
mat4[2,]
df <- data.frame(
name = c("Sahil", "Maz"),
age = c(19, 20),
semester = c(5, 5)
)
df
data
df <- df[-2]
df
rbind(df, branch = c("CSE", "ECE"))
df <- df[-3]
#df <- df[-3]
df
cbind(df, branch = c("CSE", "ECE"))
x <- c("North", "North", "East", "South", "West", "East")
fc <- as.factor(x)
fc
fc[3]
levels(fc)
l <- list("Sahil", 1:4, TRUE, 23.4)
l
l.append(34)
append(l,34)
l
l <- append(l,34)
l
"How" %in% l
l[-3]
l <- l[-3]
l
m <- matrix(10:17, 2, 4)
m.transpose()
transpose(m)
m <- t(m)
m
m
m <- t(m)
m <- matrix(10:17, 2, 4)
m
m <- t(m)
m
m1 <- matrix(10:17, 2, 4)
m1
m1 <- t(m1)
m1
m2 <- matrix(12:19, 4, 2)
m2
m1 %*% m2
m1 <- matrix(10:17, 2, 4)
m1 %*% m2
if(nrow(m2) == ncol(m1)){
m1 %*% m2
} else {
paste("Incompatible")
}
m1 <- t(m1)
f(nrow(m2) == ncol(m1)){
if(nrow(m2) == ncol(m1)){
m1 %*% m2
} else {
paste("Incompatible")
}
m1 %*% m2
if(nrow(m2) == ncol(m1)){
m1 %*% m2
} else {
paste("Incompatible")
}
m1 <- matrix(10:17, 2, 4)
df1 <- data.frame(
name = c("A", "B", "C", "D", "E"),
age = c(19:23),
gender = c("Male", "Female", "Female", "Male", "Male")
)
df1
cbind(df1, occupation = c("R", "S", "T", "U", "V"))
df1[age > 20]
df1[df1$age > 20]
df1[[df1$age > 20]]
df[df1$age > 20,]
df1[df1$age > 20,]
df1 <- cbind(df1, occupation = c("R", "S", "T", "U", "V"))
df1[df1$age > 20,]
transpose <- function(m) {
res <- matrix(9, nrow = ncol(m), ncol = nrow(m))
for(i in 1:nrow(m)) {
for (j in 1:ncol(m)) {
res[j,i] = m[i][j]
}
}
return(res)
}
m1 <- matrix(10:17, 2, 4)
m1
m1 <- transpose(m1)
m1
transpose <- function(m) {
res <- matrix(0, nrow = ncol(m), ncol = nrow(m))
for(i in 1:nrow(m)) {
for (j in 1:ncol(m)) {
res[j,i] = m[i][j]
}
}
return(res)
}
m1 <- transpose(m1)
m1
m1 <- matrix(10:17, 2, 4)
m1
transpose <- function(m) {
res <- matrix(0, nrow = ncol(m), ncol = nrow(m))
for(i in 1:nrow(m)) {
for (j in 1:ncol(m)) {
res[j,i] = m[i][j]
}
}
return(res)
}
m1 <- transpose(m1)
m1
m1 <- matrix(10:17, 2, 4)
m1
transpose <- function(m) {
res <- matrix(0, nrow = ncol(m), ncol = nrow(m))
for(i in 1:nrow(m)) {
for (j in 1:ncol(m)) {
res[i,j] = m[j][i]
}
}
return(res)
}
m1 <- transpose(m1)
m1
m1 <- matrix(10:17, 2, 4)
m1
transpose <- function(m) {
res <- matrix(0, nrow = ncol(m), ncol = nrow(m))
for(i in 1:nrow(m)) {
for (j in 1:ncol(m)) {
res[i,j] = m[j,i]
}
}
return(res)
}
m1 <- transpose(m1)
m1 <- matrix(10:17, 2, 4)
m1
transpose <- function(m) {
res <- matrix(0, nrow = ncol(m), ncol = nrow(m))
for(i in 1:nrow(m)) {
for (j in 1:ncol(m)) {
res[j,i] = m[i,j]
}
}
return(res)
}
m1 <- transpose(m1)
m1
x <- c(580, 7813, 28266, 59287, 75700,
87820, 95314, 126214, 218843, 471497,
936851, 1508725, 2072113)
# library required for decimal_date() function
library(lubridate)
install.packages("lubridate")
# library required for decimal_date() function
library(lubridate)
# output to be created as png file
png(file ="predictiveAnalysis.png")
# creating time series object
# from date 22 January, 2020
mts <- ts(x, start = decimal_date(ymd("2020-01-22")),
frequency = 365.25 / 7)
# plotting the graph
plot(mts, xlab ="Weekly Data of sales",
ylab ="Total Revenue",
main ="Sales vs Revenue",
col.main ="darkgreen")
# saving the file
dev.off()
getwd()
var1 <- "Sahil"
var2 <- 19L
var3 <- 3+4i
setwd("C:/study/int334")
setwd("C://study/int334")
getwd()
setwd("C:\\study\int334")
setwd("C:\study\int334")
setwd("C:/study/int334/")
setwd("C:/")
setwd("study")
setwd("int334")
setwd("int234")
setwd("C:/study/234")
setwd("C:/study/int234")
save(var1, var2, var3, file = "abc.RData")
ls()
rm(list(ls()))
rm(list(ls)
rm(list(ls))
rm(list(ls))
rm(list(ls()))
rm(a,b,c)
rm(var1, var2, var3)
read.csv("sahil.csv")
df <- data.frame(
name <- c("Sahil", "Maz", "Pushp"),
age <- c(19, 20, 20)
)
write.csv(df, file = "data.csv")
read.csv("data.csv")
df <- data.frame(
name <- c("Sahil", "Maz", "Pushp"),
age <- c(19, 20, 20)
)
write.csv(df, file = "data.csv")
read.csv("data.csv")
df <- data.frame(
name = c("Sahil", "Maz", "Pushp"),
age = c(19, 20, 20)
)
write.csv(df, file = "data1.csv")
read.csv("data1.csv")
df <- data.frame(
name <- c("Sahil", "Maz", "Pushp"),
age <- c(19, 20, 20)
)
write.csv(df, file = "data1.csv")
read.csv("data1.csv")
df <- data.frame(
name = c("Sahil", "Maz", "Pushp"),
age = c(19, 20, 20)
)
write.csv(df, file = "data1.csv")
read.csv("data1.csv")
df <- data.frame(
c("Sahil", "Maz", "Pushp"),
c(19, 20, 20)
)
write.csv(df, file = "data1.csv")
read.csv("data1.csv")
df <- data.frame(
c("Sahil", "Maz", "Pushp"),
c(19, 20, 20)
)
write.csv(df, file = "data1.csv")
read.csv("data1.csv")
df <- data.frame(
name,
age
)
write.csv(df, file = "data1.csv")
read.csv("data1.csv")
df <- data.frame(
c("Sahil", "Maz", "Pushp"),
c(19, 20, 20)
)
write.csv(df, file = "data1.csv")
read.csv("data1.csv")
df <- data.frame(
name = c("Sahil", "Maz", "Pushp"),
age = c(19, 20, 20)
)
write.csv(df, file = "data1.csv")
read.csv("data1.csv")
df <- data.frame(
name <- c("Sahil", "Maz", "Pushp"),
age <- c(19, 20, 20)
)
write.csv(df, file = "data1.csv")
read.csv("data1.csv")
df <- data.frame(
name,
age
)
write.csv(df, file = "data1.csv")
read.csv("data1.csv")
df <- data.frame(
name = c("Sahil", "Maz", "Pushp"),
age = c(19, 20, 20)
)
df <- data.frame(
name <- c("Sahil", "Maz", "Pushp"),
age <- c(19, 20, 20)
)
write.csv(df, file = "data1.csv")
read.csv("data1.csv")
df <- data.frame(
name = c("Sahil", "Maz", "Pushp"),
age = c(19, 20, 20)
)
write.csv(df, file = "data1.csv")
read.csv("data1.csv")
summary(df)
library(base64enc)
detach("package:base64enc", unload = TRUE)
install.packages(c("digest", "rmarkdown", "xfun"))
summary(df$age)
range(df$age)
diff(range(df$age))
table(df)
table(df$age)
table(df[,2])
table(df)
prop.table(table(df))
df <- data.frame(
c("Sahil", "Maz", "Pushp"),
c(19, 20, 20)
)
write.csv(df, file = "data1.csv")
read.csv("data1.csv")
df <- data.frame(
name = c("Sahil", "Maz", "Pushp"),
age = c(19, 20, 20)
)
write.csv(df, file = "data1.csv")
read.csv("data1.csv")
prop.table(table(df))*100
prop.table(table(df))
round(prop.table(table(df))*100, digits = 1)
round(prop.table(table(df$age))*100, digits = 1)
round(prop.table(table(df$age))*100, digits = 1)
